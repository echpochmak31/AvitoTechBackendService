// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/echpochmak31/avitotechbackendservice/internal/repositories (interfaces: Repository)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/echpochmak31/avitotechbackendservice/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddSegment mocks base method.
func (m *MockRepository) AddSegment(arg0 string, arg1 float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSegment", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSegment indicates an expected call of AddSegment.
func (mr *MockRepositoryMockRecorder) AddSegment(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSegment", reflect.TypeOf((*MockRepository)(nil).AddSegment), arg0, arg1)
}

// AddUserSegments mocks base method.
func (m *MockRepository) AddUserSegments(arg0 int64, arg1 []models.AbstractSegmentWithTTL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserSegments", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserSegments indicates an expected call of AddUserSegments.
func (mr *MockRepositoryMockRecorder) AddUserSegments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserSegments", reflect.TypeOf((*MockRepository)(nil).AddUserSegments), arg0, arg1)
}

// DeleteExpiredSegments mocks base method.
func (m *MockRepository) DeleteExpiredSegments() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExpiredSegments")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExpiredSegments indicates an expected call of DeleteExpiredSegments.
func (mr *MockRepositoryMockRecorder) DeleteExpiredSegments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExpiredSegments", reflect.TypeOf((*MockRepository)(nil).DeleteExpiredSegments))
}

// GetAllActiveSegments mocks base method.
func (m *MockRepository) GetAllActiveSegments() ([]models.AbstractSegment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllActiveSegments")
	ret0, _ := ret[0].([]models.AbstractSegment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllActiveSegments indicates an expected call of GetAllActiveSegments.
func (mr *MockRepositoryMockRecorder) GetAllActiveSegments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllActiveSegments", reflect.TypeOf((*MockRepository)(nil).GetAllActiveSegments))
}

// GetUserSegments mocks base method.
func (m *MockRepository) GetUserSegments(arg0 int64) ([]models.AbstractSegment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSegments", arg0)
	ret0, _ := ret[0].([]models.AbstractSegment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSegments indicates an expected call of GetUserSegments.
func (mr *MockRepositoryMockRecorder) GetUserSegments(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSegments", reflect.TypeOf((*MockRepository)(nil).GetUserSegments), arg0)
}

// RemoveSegment mocks base method.
func (m *MockRepository) RemoveSegment(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSegment", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveSegment indicates an expected call of RemoveSegment.
func (mr *MockRepositoryMockRecorder) RemoveSegment(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSegment", reflect.TypeOf((*MockRepository)(nil).RemoveSegment), arg0)
}

// RemoveUserSegments mocks base method.
func (m *MockRepository) RemoveUserSegments(arg0 int64, arg1 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserSegments", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUserSegments indicates an expected call of RemoveUserSegments.
func (mr *MockRepositoryMockRecorder) RemoveUserSegments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserSegments", reflect.TypeOf((*MockRepository)(nil).RemoveUserSegments), arg0, arg1)
}
